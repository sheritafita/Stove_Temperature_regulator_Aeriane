// #include <OneWire.h>
// #include <DallasTemperature.h>
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <stdint.h>
// Data wire is connected to GPIO 4
#define ONE_WIRE_BUS 4

// Replace with your network credentials
const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";

// Create instances for OneWire and DallasTemperature
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

// Create an AsyncWebServer object on port 80
AsyncWebServer server(80);

// Variable to store temperature
float temperatureC;

// HTML & JS for the web page
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>ESP32 Temperature Curve</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <h1>ESP32 Temperature Curve</h1>
  <canvas id="tempChart" width="400" height="200"></canvas>
  <script>
    var ctx = document.getElementById('tempChart').getContext('2d');
    var tempChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [], // Time labels
            datasets: [{
                label: 'Temperature (Â°C)',
                data: [],
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 2,
                fill: false
            }]
        },
        options: {
            scales: {
                x: { 
                    type: 'linear',
                    position: 'bottom'
                }
            }
        }
    });

    setInterval(function() {
      fetch('/temperature')
      .then(response => response.json())
      .then(data => {
        var time = new Date().toLocaleTimeString();
        tempChart.data.labels.push(time);
        tempChart.data.datasets[0].data.push(data.temperature);

        if (tempChart.data.labels.length > 10) {
          tempChart.data.labels.shift();
          tempChart.data.datasets[0].data.shift();
        }

        tempChart.update();
      });
    }, 2000);
  </script>
</body>
</html>
)rawliteral";

// Function to get temperature and send it as JSON
void getTemperature() {
  sensors.requestTemperatures();  // Send the command to get temperatures
  temperatureC = sensors.getTempCByIndex(0);  // Get temperature in Celsius
}

void setup() {
  // Start the serial communication
  Serial.begin(115200);

  // Initialize the temperature sensor
  sensors.begin();

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Serve the HTML page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html);
  });

  // Serve the temperature data as JSON
  server.on("/temperature", HTTP_GET, [](AsyncWebServerRequest *request){
    getTemperature();
    String json = "{\"temperature\": " + String(temperatureC) + "}";
    request->send(200, "application/json", json);
  });

  // Start server
  server.begin();
}

void loop() {
  // Nothing needed in loop
}





